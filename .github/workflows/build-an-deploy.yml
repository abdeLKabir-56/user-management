name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build, Analyze, and Deploy
    runs-on: self-hosted

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures a complete history for analysis

      # Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21

      # Set up Maven
      - name: Setup Maven
        shell: powershell
        run: |
          $MavenPath = "$env:USERPROFILE\maven\apache-maven-3.8.8"
          if (!(Test-Path $MavenPath)) {
            Write-Host "Downloading and installing Maven..."
            Invoke-WebRequest -Uri "https://downloads.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.zip" -OutFile "maven.zip"
            Expand-Archive -Path "maven.zip" -DestinationPath "$env:USERPROFILE\maven"
          }
          echo "MAVEN_HOME=$MavenPath" >> $env:GITHUB_ENV
          echo "$MavenPath\bin" >> $env:GITHUB_PATH

      # Build and SonarQube analysis
      - name: Build and Analyze with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
              -Dsonar.projectKey=tp-sonar \
              -Dsonar.projectName='tp-sonarQube'
        shell: cmd

      # Build Docker image
      - name: Build Docker Image
        run: |
          docker build -t carikk/quality-gate:latest .

      # Push Docker image to DockerHub
      - name: Log in to DockerHub
        shell: powershell
        run: |
          docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
      - name: Push Docker Image
        run: |
          docker push carikk/quality-gate:latest

      # Set up kubeconfig from secret
      - name: Set Up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > $HOME/.kube/config
          kubectl config use-context docker-desktop
          kubectl config set-context --current --namespace=ensakh

      # Verify Kubernetes context
      - name: Verify Kubernetes Context
        run: |
          kubectl config current-context
          kubectl get namespaces

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml

      # Verify Kubernetes deployment
      - name: Verify Kubernetes Deployment
        run: |
          kubectl get nodes
          kubectl get namespaces
          kubectl get pods
